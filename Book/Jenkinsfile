pipeline {
    agent any

    environment {
        DOCKER_IMAGE_TAG = 'latest'
        REGISTRY = 'adrielnascimento'
        IMAGE_NAME = 'bookstore'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Check Docker') {
            steps {
                bat 'docker info'
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Verify Workspace') {
            steps {
                bat 'dir'
            }
        }

        stage('Build JAR') {
            steps {
                dir('Book') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Cleanup Old Images') {
            steps {
                script {
                    try {
                        bat 'docker system prune -f'
                        bat "docker rmi ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f"
                    } catch (error) {
                        echo "Cleanup warning (can be ignored): ${error}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Book') {
                    script {
                        try {
                            // Construindo a imagem Docker
                            bat "docker build -t ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."

                            // Tag com número do build
                            bat "docker tag ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                        } catch (error) {
                            echo "Docker build failed: ${error}"
                            throw error
                        }
                    }
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                bat 'docker images | findstr bookstore'
            }
        }

       stage('Push to Docker Hub') {
           steps {
               script {
                   try {
                       // Corrigindo a autenticação do Docker Hub
                       withCredentials([usernamePassword(
                           credentialsId: 'dockerhub-credentials',
                           usernameVariable: 'adrielnascimento',
                           passwordVariable: 'zcfkd.9991@'
                       )]) {
                           bat "docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%"

                           // Push das imagens
                           bat "docker push adrielnascimento/bookstore:latest"
                           bat "docker push adrielnascimento/bookstore:${BUILD_NUMBER}"
                       }
                   } catch (error) {
                       echo "Docker push failed: ${error}"
                       throw error
                   } finally {
                       bat 'docker logout'
                   }
               }
           }
       }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        withKubeConfig([credentialsId: 'kubeconfig-credentials']) {
                            dir('Book') {
                                // Atualizar a imagem no deployment se necessário
                                bat "kubectl set image deployment/bookstore-deployment bookstore=${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"

                                // Aplicar configurações
                                bat 'kubectl apply -f deployment.yaml'
                                bat 'kubectl apply -f service.yaml'

                                // Verificar status do deployment
                                bat 'kubectl rollout status deployment/bookstore-deployment'
                            }
                        }
                    } catch (error) {
                        echo "Kubernetes deployment failed: ${error}"
                        throw error
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully. Image: ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        always {
            script {
                // Cleanup
                try {
                    bat 'docker system prune -f'
                } catch (error) {
                    echo "Cleanup warning: ${error}"
                }
                cleanWs()
            }
        }
    }
}