pipeline {
    agent any

    environment {
        DOCKER_IMAGE_TAG = '1.0'
        REGISTRY = 'adrielnascimento'
        IMAGE_NAME = 'bookstore'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Check Docker') {
            steps {
                bat 'docker info'
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Verify Workspace') {
            steps {
                bat 'dir'
            }
        }

        stage('Build JAR') {
            steps {
                dir('Book') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Cleanup Old Images') {
            steps {
                script {
                    try {
                        bat 'docker system prune -f'
                        bat "docker rmi ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f"
                    } catch (error) {
                        echo "Cleanup warning (can be ignored): ${error}"
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('Book') {  // Adicionado dir('Book')
                    script {
                        try {
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                          usernameVariable: 'DOCKER_USERNAME',
                                          passwordVariable: 'DOCKER_PASSWORD')]) {
                                // Login no Docker Hub
                                bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"

                                // Build da imagem
                                bat "docker build -t ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                                bat "docker tag ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"

                                // Push das imagens
                                bat "docker push ${REGISTRY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                                bat "docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                            }
                        } catch (error) {
                            echo "Docker build/push failed: ${error}"
                            throw error
                        } finally {
                            bat 'docker logout'
                        }
                    }
                }
            }
        }

       stage('Deploy to Kubernetes') {
           steps {
               script {
                   try {
                       withKubeConfig([credentialsId: 'kubeconfig-credentials']) {
                           dir('Book') {
                               // Primeiro aplicar o deployment e service
                               bat 'kubectl apply -f deployment.yaml'
                               bat 'kubectl apply -f service.yaml'

                               // Depois atualizar a imagem
                               bat "kubectl set image deployment/bookstore-app bookstore-app=${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"

                               // Verificar status
                               bat 'kubectl rollout status deployment/bookstore-app'

                               // Opcional: verificar os pods
                               bat 'kubectl get pods'
                           }
                       }
                   } catch (error) {
                       echo "Kubernetes deployment failed: ${error}"
                       throw error
                   }
               }
           }
       }
    post {
        success {
            echo "Pipeline completed successfully. Image: ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        always {
            script {
                try {
                    bat 'docker system prune -f'
                } catch (error) {
                    echo "Cleanup warning: ${error}"
                }
                cleanWs()
            }
        }
    }
}